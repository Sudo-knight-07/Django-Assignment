Yes, by default, Django signals run in the same thread as the caller. This means that the signal handlers are executed in the same thread as the code that sends the signal.

Example Code:

from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver
import threading

class MyModel(models.Model):
    name = models.CharField(max_length=100)

@receiver(post_save, sender=MyModel)
def my_signal_receiver(sender, instance, **kwargs):
    print(f"Signal receiver thread ID: {threading.get_ident()}")


import threading

def create_instance():
    print(f"Caller thread ID: {threading.get_ident()}")
    MyModel.objects.create(name="Test Instance")

# Simulate a function call in the main thread
create_instance()


Expected Output:

Caller thread ID: 140275095312192
Signal receiver thread ID: 140275095312192


